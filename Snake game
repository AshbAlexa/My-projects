
"""
1) Create a grid
2) Can move in fixed num of pixels3
3) Snake is a list with different positions
4) each position is a block 
"""

import pygame,sys,random
from pygame.math import Vector2
#no need to write pygame.maths


class SNAKE:
    def __init__(self):
        self.body = [Vector2(5,10),Vector2(4,10),Vector2(3,10)] # (x,y)
        self.direction = Vector2(1,0)
        self.new_block = False

        self.head_up = pygame.image.load("Graphics_Snake/head_up.png").convert_alpha()
        self.head_down = pygame.image.load("Graphics_Snake/head_down.png").convert_alpha()
        self.head_right = pygame.image.load("Graphics_Snake/head_right.png").convert_alpha()
        self.head_left = pygame.image.load("Graphics_Snake/head_left.png").convert_alpha()

        self.tail_up = pygame.image.load("Graphics_Snake/tail_up.png").convert_alpha()
        self.tail_down = pygame.image.load("Graphics_Snake/tail_down.png").convert_alpha()
        self.tail_right = pygame.image.load("Graphics_Snake/tail_right.png").convert_alpha()
        self.tail_left = pygame.image.load("Graphics_Snake/tail_left.png").convert_alpha()

        self.body_vertical = pygame.image.load("Graphics_Snake/body_vertical.png").convert_alpha()
        self.body_horizontal = pygame.image.load("Graphics_Snake/body_horizontal.png").convert_alpha()

        self.body_bl = pygame.image.load("Graphics_Snake/body_bl.png").convert_alpha()
        self.body_tr = pygame.image.load("Graphics_Snake/body_tr.png").convert_alpha()
        self.body_br = pygame.image.load("Graphics_Snake/body_br.png").convert_alpha()
        self.body_tl = pygame.image.load("Graphics_Snake/body_tl.png").convert_alpha()



    def draw_snake(self):
        self.update_head_graphics()
        self.update_tail_graphics()

        for index,block in enumerate(self.body):


            # 1. Create a rect for positioning
            x_pos = int(block.x * cell_size)
            y_pos = int(block.y * cell_size)
            snake_rect = pygame.Rect(x_pos,y_pos,cell_size,cell_size) #x,y,w,h

            # 2. What direction face is heading
            if index == 0 :

                screen.blit(self.head,snake_rect)

            elif index == len(self.body)-1:#  last item
                screen.blit(self.tail,snake_rect)

            else:
                # CHECKS MIDDLE BLOCK GRAPHIC
                previous_block = self.body[index+1] - block    #block before - present block
                next_block = self.body[index-1] - block  # block after - present block
                # If block x cor is same then they move vertically
                if previous_block.x == next_block.x:
                    screen.blit(self.body_vertical,snake_rect)
                elif previous_block.y == next_block.y:
                    screen.blit(self.body_horizontal,snake_rect)
                else:

                    # THIS PART IS A LITTLE BIT HARD TO UNDERSTAND

                    if previous_block.x == -1 and next_block.y == -1 or previous_block.y == -1 and next_block.x == -1:
                        screen.blit(self.body_tl, snake_rect)
                    elif previous_block.x == 1 and next_block.y == 1 or previous_block.y == 1 and next_block.x == 1:
                        screen.blit(self.body_br, snake_rect)
                    elif previous_block.x == -1 and next_block.y == 1 or previous_block.y == -1 and next_block.x == 1:
                        screen.blit(self.body_tr, snake_rect)
                    elif previous_block.x == 1 and next_block.y == -1 or previous_block.y == 1 and next_block.x == -1:
                        screen.blit(self.body_bl, snake_rect)



                #pygame.draw.rect(screen,(183,191,122),snake_rect)

    def update_head_graphics(self):

        # Body block - Head Pos = new vector(how they relate)
        head_relation = self.body[1] - self.body[0]

        if head_relation == Vector2(1,0):
            self.head = self.head_left
        elif head_relation == Vector2(-1,0):
            self.head = self.head_right
        elif head_relation == Vector2(0,1):
            self.head = self.head_up
        elif head_relation == Vector2(0,-1):
            self.head = self.head_down

    def update_tail_graphics(self):

        # Body block - tail block = vector(direction)

        tail_relation = self.body[-2] - self.body[-1]

        if tail_relation == Vector2(1,0):
            self.tail = self.tail_left
        elif tail_relation == Vector2(-1,0):
            self.tail = self.tail_right
        elif tail_relation == Vector2(0,1):
            self.tail = self.tail_up
        elif tail_relation == Vector2(0,-1):
            self.tail = self.tail_down

    def move_snake(self):
        """
        Moving the Snake
        - The head is moved to a new block 
        - The block before the head gets the
          where the head used to be
        -Each block is moved to the position
        of the block that used to be before it

        [pos1,pos2,pos3] + [direction] --> new position /copy list + head
        """
        if self.new_block == True:
            body_copy = self.body[:]  #+ this will add one block to the end
            body_copy.insert(0, body_copy[0] + self.direction)
            self.body = body_copy[:]
            self.new_block = False
        else:
            body_copy = self.body[:-1]  # copy body list except last element
            body_copy.insert(0,body_copy[0] + self.direction) #first element of body + direction
            self.body = body_copy[:] # return entire list -->

    def add_block(self):
        self.new_block = True


class FRUIT():
    def __init__(self):
        self.x = random.randint(0,cell_number-1) #  -1 ensures were always on screen
        self.y = random.randint(0,cell_number-1)
        self.pos = Vector2(self.x,self.y)

    def draw_fruit(self):
        #create rectangle
        fruit_rect = pygame.Rect(int(self.pos.x * cell_size),int(self.pos.y* cell_size),cell_size,cell_size) # x,y,w,h
        screen.blit(apple,fruit_rect)

        #draw rectangle
       # pygame.draw.rect(screen,(95,41,52),fruit_Rect)#surface,color,rectangle

    def randomise(self):
        self.x = random.randint(0,cell_number-1) #  -1 ensures were always on screen
        self.y = random.randint(0,cell_number-1)
        self.pos = Vector2(self.x,self.y)



class MAIN():
    # Where all the logic will happen
    """
    -collision with fruit and snake
    -disappear fruit and +1 cube onto snake body
    """
    def __init__(self):
        self.snake = SNAKE()
        self.fruit = FRUIT()

    def update(self):
        #calls methods
        self.snake.move_snake()
        self.check_collision()
        self.check_fail()


    def draw_elements(self):
        self.draw_grass()
        self.fruit.draw_fruit()
        self.snake.draw_snake()
        self.draw_score()

    def check_collision(self):
        if self.fruit.pos == self.snake.body[0]:
            # - reposition fruit
            self.fruit.randomise()

            # - +1 cube onto end of snake body
            self.snake.add_block()

    def check_fail(self):
        #check if snake is outside screen
        if not 0 <= self.snake.body[0].x < cell_number: # if not within boundery
            self.game_over()
        elif not 0<= self.snake.body[0].y < cell_number:
            self.game_over()

        #check if snake hits itself
        for block in self.snake.body[1:]: # only include elements after pos 0
            if block == self.snake.body[0]:
                self.game_over()

    def game_over(self):
        pygame.quit()
        sys.exit()

    def draw_grass(self):
        grass_color = (167,209,61)
        for row in range(cell_number):


            if row % 2 ==0:
                for col in range(cell_number):
                    x = col * cell_size
                    y = row * cell_size

                    if col % 2 == 0:
                        grass_Rect = pygame.Rect(x,y,cell_size,cell_size) # create a rect for each cell // x,y,w,h
                        pygame.draw.rect(screen,grass_color ,grass_Rect)
            else:
                for col in range(cell_number):
                    x = col * cell_size
                    y = row * cell_size
                    if col % 2 != 0:
                        grass_Rect = pygame.Rect(x, y, cell_size, cell_size)  # create a rect for each cell // x,y,w,h
                        pygame.draw.rect(screen, grass_color, grass_Rect)

    def draw_score(self):
        #score rect
        score_text = str(len(self.snake.body)-3)
        score_surface = game_font.render(score_text,True,(56,74,12)) # text,
        score_x = int(cell_size * cell_number-60)
        score_y = int(cell_size * cell_number-40)
        score_rect = score_surface.get_rect(center = (score_x,score_y))

        #apple icon next to score
        apple_rect = apple.get_rect(midright = (score_rect.left,score_rect.centery))#xywh

        #rectangle
        frame_rect = pygame.Rect(apple_rect.left,apple_rect.top,apple_rect.width + score_rect.width + 10,apple_rect.height) #xywh
        pygame.draw.rect(screen,(184,109,61),frame_rect)

        #screen blit
        screen.blit(score_surface, score_rect)  # surface / position rect
        screen.blit(apple, apple_rect)



pygame.init()
cell_size = 40 # cellsize in grid
cell_number = 20 # number of cells
# multiplying c_s*c_n will illustrate a grid
screen = pygame.display.set_mode((cell_size * cell_number,cell_size * cell_number))
clock = pygame.time.Clock()
apple = pygame.image.load("Graphics_Snake/apple.png").convert_alpha()

game_font = pygame.font.Font("freesansbold.ttf", 25)


# Classes
main_game = MAIN()


#Snake move timer
SCREEN_UPDATE = pygame.USEREVENT
pygame.time.set_timer(SCREEN_UPDATE,150) # miliseconds

# Main game loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

            # Snake Move // user input
        if event.type == SCREEN_UPDATE:
            main_game.update()
        if event.type == pygame.KEYDOWN: # when a key is pressed
            if event.key == pygame.K_UP :
                if main_game.snake.direction.y != 1:
                    main_game.snake.direction = Vector2(0,-1)
            elif event.key == pygame.K_RIGHT:
                if main_game.snake.direction.x != -1:
                    main_game.snake.direction = Vector2(1,0)
            elif event.key == pygame.K_LEFT:
                if main_game.snake.direction.x != 1:
                    main_game.snake.direction = Vector2(-1,0)
            elif event.key == pygame.K_DOWN:
                if main_game.snake.direction.y != -1:
                    main_game.snake.direction = Vector2(0,1) # opposite x,y idky
              # variable that calls class.snake attribute than links to snake class. the method direction within snake class

    screen.fill(pygame.Color(160,200,60))
    main_game.draw_elements() # calls class
    pygame.display.update()
    #loop 60 times per minute
    clock.tick(100)











